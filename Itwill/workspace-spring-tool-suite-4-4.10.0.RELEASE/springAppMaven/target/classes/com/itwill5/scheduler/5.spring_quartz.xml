<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<bean id="boardService" class="com.itwill5.scheduler.BoardServiceImpl"/> 
	<bean id="job1"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
		<property name="targetObject" ref="boardService" />
		<!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
		<property name="targetMethod" value="method1" />
		<!-- 동시 실행을 방지합니다. -->
		<property name="concurrent" value="true" />
	</bean>
	<bean id="job2"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
		<property name="targetObject" ref="boardService" />
		<!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
		<property name="targetMethod" value="method2" />
		<!-- 동시 실행을 방지합니다. -->
		<property name="concurrent" value="true" />
	</bean>
	<bean id="job3"
		  class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
		<property name="targetObject" ref="boardService" />
		<!-- 서비스 객체에서 주기적으로 실행될 메소드른 지정합니다. -->
		<property name="targetMethod" value="method3" />
		<!-- 동시 실행을 방지합니다. -->
		<property name="concurrent" value="true" />
	</bean>
	
	
	<!-- Simple 트리거 -->
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
	    <!-- see the example of method invoking job above -->
	    <property name="jobDetail" ref="job1" />
	    <!-- 1 seconds -->
	    <property name="startDelay" value="1000" />
	    <!-- repeat every 1 seconds -->
	    <property name="repeatInterval" value="1000" />
	</bean>
	
	<!-- Cron 트리거1 -->
	<bean id="cronTrigger1"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="job2" />
		<!-- CronTrigger를 사용하여 1초 간격으로 실행되도록 지정했습니다. -->
		<property name="cronExpression" value="0/1 * * * * ?" />
		<!-- 
		>>> Cron Expression에는 총 7개의 필드 있고 마지막 필드(년도)는 생략 가능합니다.
			========================================
			필드이름			허용 값
			========================================
			초(Seconds)	 		0 ~ 59
			분(Minutes)		 	0 ~ 59
			시간(Hours)	 		0 ~ 23
			일(Day-of-month)	1 ~ 31
			달(Months)			1 ~ 12 or JAN ~ DEC
			요일(Day-of-week)	1 ~ 7 or SUN-SAT
			년도(Year)(생략가능)1970 ~ 2099
			=======================================
			
			- 와일드카드(*) 문자는 '매 번'을 의미한다. 
			- 물음표(?) 는 '설정값 없음'을 나타낸다. 이는 일(DOM)과 요일(DOW)에만 사용할 수 있다.
			- 슬래쉬(/) 는 값 증가 표현에 사용된다. 분(Minutes) 항목에 "10/15" 라고 쓴다면, "10분부터 시작해서 매 15분마다" 를 의미한다.
			- 샾(#)은 k#N으로 사용되며, 이 달의 N번째 K요일을 의미한다. 요일(DOW) 항목에 "5#2" 라고 적는다면, "이 달의 두번째 목요일"을 뜻한다.
			- 문자 "L" 은 마지막(Last)를 의미한다. L은 일(DOM)과 요일(DOW)에만 사용할 수 있다. 예를 들어 일(DOM)항목에 L이 사용된다면 단순하게 해당 월의 마지막 날을 의미한다. 조금 다른 방법으로도 사용되는데, 특정 값 뒤에 사용된다면 "이 달의 마지막 날"을 의미하게 된다. 예를들어 요일에 "6L"을 준다면, "이 달의 마지막 금요일" 을 의미하게 된다.
			- 문자 "W"는 해당 날로부터 가장 가까운 평일(Weekday)을 의미한다. 예를 들어 일(DOM) 항목에 "10W"라고 준다면, "이 달의 10째 날로부터 가장 가까운 평일"을 의미한다.
			- 각각의 단위는 범위나 목록으로 나타낼 수도 있다. 일(DOM)에 "1-15"라고 적는다면 1일부터 15일까지를 뜻한다.
			- 각각의 항목은 항목에 유효한 값만이 들어올 수 있다. 예를 들어 일은 1 ~ 31 사이의 숫자만 허용되고, 시간은 0~23 사이의 시간만 허용한다.	
		
		>>> Cron 표현식 예제
			* 매일 12시에 실행		: "0 0 12 * * *"   
			* 매일 10시 15분에 실행	: "0 15 10 * * *" 
			* 매일 14시에 실행		: "0 * 14 * * *"  
			* 매일 14시, 18시에 시작해서 5분간격으로 실행 : "0 0/5 14 18 * * *"  
			* 매일 14시에 시작해서 0분동안 실행: "0 0-5 14 * * *"
			* 매 2분 마다 실행 : "0 0/2 * ?"
			* 10초뒤 2분마다 실행 : "10 0/2 * ?"
			* 매일 오전 1시에 실행 : "0 0 1 * * ?"
			* 매주 금요일 오전 1시에 실행 : "0 0 1 ? * FRI"
			* 매주 수요일과 금요일 10:30, 11:30, 12:30, 13:30 에 실행 : "0 30 10-13 ? * WED,FRI"
			* 매월 5일, 20일 오전 8시부터 오전 10시 사이에 30분 간격으로 실행 : "0 0/30 8-9 5,20 * ?"
		 -->
	</bean>
	<!-- Cron 트리거2 -->
	<bean id="cronTrigger2" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="job3" />
	    <!-- run every morning at 0 AM -->
	    <property name="cronExpression" value="0 0 0 * * ?" />
	</bean>
	
	<!-- 스케줄러-->
	<bean id="testJobScheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다.-->
			<list>
				<ref bean="simpleTrigger" />
				<ref bean="cronTrigger1" />
				<ref bean="cronTrigger1" />
				
			</list>
		</property>
	</bean>
	 
</beans>












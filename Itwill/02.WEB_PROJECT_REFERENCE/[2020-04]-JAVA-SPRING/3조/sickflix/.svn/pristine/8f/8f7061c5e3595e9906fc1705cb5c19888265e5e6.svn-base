package com.itwill.board;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.naming.InitialContext;
import javax.sql.DataSource;

import com.itwill.genre.test.JavaSeDataSource;


/*
 * 자료실 게시판에서 데이터베이스의 접근을 전담하는 클래스. 
 * BOARD 테이블과의 접근을 담당한다.
 */
public class BoardDao {
	
	private DataSource dataSource;
	
	public BoardDao() throws Exception {
		InitialContext ic=new InitialContext();
		dataSource=(DataSource)ic.lookup("java:/comp/env/jdbc/OracleDB");
	}
	
	public BoardDao(DataSource dataSource) throws Exception {
		
		this.dataSource = JavaSeDataSource.getDataSource();
		
	}

	
	
	/**
	 * 새로운 게시물을 추가하는 메써드.
	 */
	public int create(String b_title, String m_id, String b_content) throws Exception{
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = dataSource.getConnection();
			String sql = "INSERT INTO board "
					+ "(b_no, b_title, m_id, b_content, b_date, groupno, step)"
					+ "VALUES (board_seq.nextval, ?, ?, ?,sysdate,  "
					+ "board_seq.currval, 1)";
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, b_title);
			pstmt.setString(2, m_id);
			pstmt.setString(3, b_content);
			
		
			
			
			// 4. 명령 실행
			int result = pstmt.executeUpdate();
			// 5. 결과 있으면 결과 처리
			return result;
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			// 6. 연결닫기
			conn.close();
		}
		return 0;
	}
	/**
	 * 답글 게시물을 추가하는 메써드
	 */
	public int createReply(Board board) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		int count = 0;
		try {
			// 댓글을 작성할 대상글(원글)의 정보를 조회
			Board temp = findBoard(board.getB_no());

			// 영향을 받는 기존 글들의 논리적인 순서 번호 변경
			conn = dataSource.getConnection();
			String sql = "UPDATE board " + "SET step = step + 1 "
					+ "WHERE step > ? AND groupno = ?";
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setInt(1, temp.getStep());// step 번호
			pstmt.setInt(2, temp.getGroupno());// group 번호
			pstmt.executeUpdate();
			pstmt.close();

			// 댓글 삽입
			sql = "INSERT INTO board  (b_no, b_title, m_id, b_content, b_date, groupno, step, depth) "
					+ "VALUES (board_seq.nextVal, ?, ?, ?, sysdate, ?, ?, ?)";
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setString(1, board.getB_title());// 제목
			pstmt.setString(2, board.getM_id());// 작성자
			pstmt.setString(3, board.getB_content());// 내용
			pstmt.setInt(4, temp.getGroupno());// step
			pstmt.setInt(5, temp.getStep() + 1);// step
			pstmt.setInt(6, temp.getDepth()+1);// depth

			count = pstmt.executeUpdate();
		} catch (Exception ex) {
			count = 0;
			ex.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (Exception ex) {
			}
			try {
				if (conn != null)
					conn.close();
			} catch (Exception ex) {
			}
		}
		return count;

	}
	/**
	 * 게시물 리스트를 반환(게시물시작번호,게시물끝번호) 
	 */
	public ArrayList<Board> findBoardList(int start, int last) {
		System.out.println("" + start + " ~ " + last);
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;// 조회 결과에 접근하는 참조 변수
		// 데이터베이스의 데이터를 읽어서 저장할 객체 컬렉션
		ArrayList<Board> boards = new ArrayList<Board>();

		try {
			conn = dataSource.getConnection();
			//String sql="select boardno,title,groupno,step,depth \r\n" + 
			//		"from board order by groupno desc";
			
			StringBuffer sql = new StringBuffer(500);
			sql.append("SELECT * ");
			sql.append("FROM ");

			sql.append("( ");
			sql.append("	SELECT ");
			sql.append("		rownum idx, s.* ");
			sql.append("	FROM ");

			sql.append("	( ");
			sql.append("		SELECT ");
			sql.append("			b_no, b_title, m_id, ");
			sql.append("			b_date, b_readcount, ");
			sql.append("			groupno, step, depth ");
			sql.append("		FROM ");
			sql.append("			board ");
			sql.append("		ORDER BY groupno DESC, step ASC ");
			sql.append("	) s ");

			sql.append(") ");

			sql.append("WHERE idx >= ? AND idx <= ? ");
			
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setInt(1, start);
			pstmt.setInt(2, last);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				Board board = new Board();
				board.setB_no(rs.getInt(2));
				board.setB_title(rs.getString(3));
				board.setM_id(rs.getString(4));
				board.setB_date(rs.getDate(5));
				board.setB_readcount(rs.getInt(6));
				board.setGroupno(rs.getInt(7));
				board.setStep(rs.getInt(8));
				board.setDepth(rs.getInt(9));

				boards.add(board);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			// 6. 연결닫기
			if (pstmt != null)
				try {
					pstmt.close();
				} catch (Exception ex) {
				}
			if (conn != null)
				try {
					conn.close();
				} catch (Exception ex) {
				}
		}
		//System.out.println(boards);
		return boards;
	}
	/*
	 * 
	 * 
	 */
	/**
	 * 답변게시물 존재여부확인메쏘드
	 */
	public boolean countReplay(Board board) throws SQLException {

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Boolean  isExist = false;
		int cnt=0;
		try {
			conn = dataSource.getConnection();
			StringBuffer sql = new StringBuffer(300);
			sql.append("SELECT ");
			sql.append("count(*) cnt ");
			sql.append("FROM board ");
			sql.append("WHERE groupno = ? ");
			sql.append("AND depth >= ? ");
			sql.append("AND step >= ? ");
			sql.append("ORDER BY step,depth ASC");
			
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setInt(1, board.getGroupno());
			pstmt.setInt(2, board.getDepth());
			pstmt.setInt(3, board.getStep());
			
			rs = pstmt.executeQuery();
			if (rs.next()) {
				cnt=rs.getInt("cnt");
			}
			if(cnt>1){
				isExist=true;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception ex) {
			}
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (Exception ex) {
			}
			try {
				if (conn != null)
					conn.close();
			} catch (Exception ex) {
			}
		}
		return isExist;

	}
	
	/**
	 * 게시물을 삭제하는 메써드.
	 */
	public int remove(int b_no) {
		
		Connection conn = null;
		PreparedStatement pstmt = null;
		int count = 0;
		try {
			conn = dataSource.getConnection();
			String sql = "DELETE board WHERE b_no = ?";
			
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, b_no);
			count = pstmt.executeUpdate();
		} catch (Exception ex) {
			count = 0;
			ex.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (Exception ex) {
			}
			try {
				if (conn != null)
					conn.close();
			} catch (Exception ex) {
			}
		}
		return count;

	}
	/**
	 * 게시물내용을 수정하는 메써드.
	 */
	public int update(Board board) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		int count = 0;
		try {
			conn = dataSource.getConnection();
			String sql = "UPDATE board " + "SET b_title = ?, m_id = ?, b_content = ? "
					+ "WHERE b_no = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, board.getB_title());
			pstmt.setString(2, board.getM_id());
			pstmt.setString(3, board.getB_content());
			pstmt.setInt(4, board.getB_no());
			count = pstmt.executeUpdate();
		} catch (Exception ex) {
			count = 0;
			ex.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (Exception ex) {
			}
			try {
				if (conn != null)
					conn.close();
			} catch (Exception ex) {
			}
		}
		return count;
	}
	/**
	 * 게시물 번호에 해당하는 게시물 정보를 반환하는 메써드.
	 */
	public Board findBoard(int b_no) throws SQLException {

		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		Board board = null;

		try {
			conn = dataSource.getConnection();
			StringBuffer sql = new StringBuffer(300);
			sql.append("SELECT ");
			sql.append("b_no, b_title, m_id, b_content, ");
			sql.append("b_date, b_readcount, ");
			sql.append("groupno, step, depth ");
			sql.append("FROM board ");
			sql.append("WHERE b_no = ?");
			pstmt = conn.prepareStatement(sql.toString());
			pstmt.setInt(1, b_no);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				board = new Board();
				board.setB_no(rs.getInt(1));
				board.setB_title(rs.getString(2));
				board.setM_id(rs.getString(3));
				board.setB_content(rs.getString(4));
				board.setB_date(rs.getDate(5));
				board.setB_readcount(rs.getInt(6));
				board.setGroupno(rs.getInt(7));
				board.setStep(rs.getInt(8));
				board.setDepth(rs.getInt(9));
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception ex) {
			}
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (Exception ex) {
			}
			try {
				if (conn != null)
					conn.close();
			} catch (Exception ex) {
			}
		}
		return board;

	}

	/**
	 * 게시물 조회수를 1 증가.
	 */
	public void increaseReadCount(int number) {
		Connection conn = null;
		PreparedStatement pstmt = null;

		try {
			conn = dataSource.getConnection();
			String sql = "UPDATE board " + "SET readcount = readcount + 1 "
					+ "WHERE b_no = ?";
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, number);
			pstmt.executeUpdate();
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (Exception ex) {
			}
			try {
				if (conn != null)
					conn.close();
			} catch (Exception ex) {
			}
		}
	}

	/**
	 * 게시물 총 건수를 조회, 반환
	 */
	public int getBoardCount() {
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int count = 0;
		try {
			conn = dataSource.getConnection();
			String sql = "SELECT COUNT(*) FROM board";
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if (rs.next())
				count = rs.getInt(1);

		} catch (Exception ex) {
			count = 0;
			ex.printStackTrace();
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (Exception ex) {
			}
			try {
				if (pstmt != null)
					pstmt.close();
			} catch (Exception ex) {
			}
			try {
				if (conn != null)
					conn.close();
			} catch (Exception ex) {
			}
		}
		return count;
	}

	

	
}

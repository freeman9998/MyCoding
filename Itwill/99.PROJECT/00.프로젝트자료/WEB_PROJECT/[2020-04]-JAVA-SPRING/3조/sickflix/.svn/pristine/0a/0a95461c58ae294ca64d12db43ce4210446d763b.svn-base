package com.itwill.member;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.itwill.genre.test.JavaSeDataSource;

/*
사용자관리에서 데이타베이스와의 작업을 전담하는 클래스
USERINFO 테이블에 사용자를 추가,삭제,검색,수정등의 작업을한다.
*/
public class MemberDAO {
	private DataSource dataSource;
	
	public MemberDAO() throws Exception {
		InitialContext ic = new InitialContext();
		dataSource = (DataSource)ic.lookup("java:/comp/env/jdbc/OracleDB");
		System.out.println("MemberDAO() 생성자 : " + this);
	}
	
	public MemberDAO(DataSource dataSource) throws Exception {
		
		this.dataSource = JavaSeDataSource.getDataSource();
		
	}
	
	/*
	 * 사용자관리테이블에 새로운사용자생성
	 */
	public int create(Member member) throws Exception {
		Connection con = null;
		PreparedStatement pstmt = null;
		String insertQuery = "insert into member values(?,?,?,?,?)";
		try {
			con = dataSource.getConnection();
			pstmt = con.prepareStatement(insertQuery);
			pstmt.setString(1, member.getM_id());
			pstmt.setString(2, member.getM_password());
			pstmt.setString(3, member.getM_name());
			pstmt.setString(4, member.getM_phone());
			pstmt.setString(5, member.getM_email());
			int rows = pstmt.executeUpdate();
			return rows;

		} finally {
			if (pstmt != null) {
				pstmt.close();
			}
				if (con != null) {
					con.close();
				}
		}
	}
			/*
			 * 기존의 사용자정보를 수정
			 */
	public int update(Member member) throws Exception {
		Connection con = null;
		PreparedStatement pstmt = null;
		String updateQuery = "update member set " + 
				"m_password = ?, m_name = ?, m_phone = ?, m_email = ? where m_id = ?";
		try {
			con = dataSource.getConnection();
			pstmt = con.prepareStatement(updateQuery);
			pstmt.setString(1, member.getM_password());
			pstmt.setString(2, member.getM_name());
			pstmt.setString(3, member.getM_phone());
			pstmt.setString(4, member.getM_email());
			pstmt.setString(5, member.getM_id());
			int rows = pstmt.executeUpdate();
			return rows;
			
		} finally {
			if(pstmt != null) {
				pstmt.close();
			}
				if (con != null) {
					con.close();
				}		
		}
		
	}
	
	/*
	 * 사용자아이디에해당하는 사용자를 삭제
	 */
	public int remove(String m_id) throws Exception {
		Connection con = null;
		PreparedStatement pstmt = null;
		String removeQuery = "delete from member where m_id = ?";
		try {
			con = dataSource.getConnection();
			pstmt = con.prepareStatement(removeQuery);
			pstmt.setString(1, m_id);
			int rows = pstmt.executeUpdate();
			return rows;
		} finally {
			if(pstmt != null) 
				pstmt.close();
			if(con != null) 
				con.close();
		}
	}
	/*
	 * 사용자아이디에해당하는 정보를 데이타베이스에서 찾아서
	 * User 도메인클래스에 저장하여 반환
	 */
	public Member findMember(String m_id) throws Exception {
		Member member = null;
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String selectQuery = "select m_password,m_name,m_phone,m_email from member where m_id = ?";
		try {
			con = dataSource.getConnection();
			pstmt = con.prepareStatement(selectQuery);
			pstmt.setString(1, m_id);
			rs = pstmt.executeQuery();
			if (rs.next()) {
				member = new Member(m_id,
							rs.getString("m_password"),
							rs.getString("m_name"),
							rs.getString("m_phone"),
							rs.getString("m_email"));
			}
		} finally {
			if (rs != null)
				rs.close();
			if(pstmt != null)
				pstmt.close();
			if(con != null)
				con.close();
		}
		return member;
		
	}
	/*
	 * 모든사용자 정보를 데이타베이스에서 찾아서 
	 * List<User> 콜렉션 에 저장하여 반환
	 */
	public ArrayList<Member> findMemberList() throws Exception {
		ArrayList<Member> memberList = new ArrayList<Member>();
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String selectQuery = "select m_id,m_password,m_name,m_phone,m_email from member";
		try {
			con = dataSource.getConnection();
			pstmt = con.prepareStatement(selectQuery);
			rs = pstmt.executeQuery();
			while (rs.next()) {
				memberList.add(new Member(
						rs.getString("m_id"),
						rs.getString("m_password"),
						rs.getString("m_name"),
						rs.getString("m_phone"),
						rs.getString("m_email")));
				
			}
		} finally {
			if (rs != null)
				rs.close();
			if (pstmt != null)
				pstmt.close();
			if (con != null)
				con.close();
		}
		return memberList;
		
	}
	/*
	 * 인자로 전달되는 아이디를 가지는 사용자가 존재하는지의 여부를판별
	 */	
	public boolean existedMember(String m_id) throws Exception {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String existedQuery = "select count(*) cnt from member where m_id = ?";
		try {
			con = dataSource.getConnection();
			pstmt = con.prepareStatement(existedQuery);
			pstmt.setString(1, m_id);
			rs = pstmt.executeQuery();
			int count = 0;
			if(rs.next()) {
				count = rs.getInt("cnt");
			}
			if (count == 1) {
				return true;
			} else {
				return false;
			}
		} finally {
			if (rs != null)
				rs.close();
			if (pstmt != null)
				pstmt.close();
			if (con != null)
				con.close();
		}
	}
			
}

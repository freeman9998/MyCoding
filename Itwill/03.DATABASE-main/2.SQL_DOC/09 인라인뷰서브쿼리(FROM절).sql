--서브쿼리(sub query)
/*
   A.서브쿼리 위치에 따른 종류
      - SELECT 컬럼절 	☞ 스칼라 서브쿼리
      - FROM 절 	    ☞ 인라인 뷰(서브쿼리)
      - WHERE 절 	    ☞ 스칼라 서브쿼리[Nested 서브쿼리]
      - GROUP BY 절 	☞ 스칼라 서브쿼리
      - HAVING 절    	☞ 스칼라 서브쿼리
      - ORDER BY 절 	☞ 스칼라 서브쿼리
      
  B.스칼라 서브쿼리(scalar subquery)
  
      1.스칼라 서브쿼리(scalar subquery)
        - 하나의 SQL문으로 취급되지만 본질적으로 하나의 함수로 간주하면됨
        - 함수의 가장큰특징은 맣은 INPUT 이 있더라도 OUTPUT은 하나만 나온다는것입니다.
        - 스칼라 서브쿼리도 일종의 함수이므로 중첩해서 사용가능하나 
          OUTPUT이 두개 이상이거나,OUTPUT의 데이타타입이 맞지않는 경우에는 에러를 발생시킵니다.
        - 대량의 데이타처리시 스칼라쿼리의 남발은 성능저하를 유발할수있으므로
          조인으로 대체하는것이 좋습니다. 
      2.스칼라 서브쿼리(scalar subquery)위치
        - SELECT COLUMN LIST 항목
        - 함수의 인자
        - WHERE절의 조건
        - ORDER BY 절
        - CASE 조건절
        - CASE 결과절
      3.대량의 데이타 처리시 개별적인건마다 수행되는 스칼라서브쿼리를 남발하는경우는
        대량의 데이타를 한꺼번에 처리할수있는 집합적개념이나 조인의 장점을 적용하기 
        힘들기 때문에 가능하면 스칼라서브쿼리가아니라 조인으로 대체하는것이 좋습니다.
 
  C.INLINE VIEW SUBQUERY   
   1. INLINE VIEW(논리적테이블) 필요성
     -질의문의 FROM 절에 테이블만 사용 가능하다면 많은 임시 테이블을 만들어야 할 것입니다.
         다행히도 데이터베이스에서는 뷰라는 객체를 제공하여 이러한 테이블의 서브 집합을 
         질의문의 형태로 표현하여 저장할 수 있도록 하고 있습니다. 
         그러나, 뷰 또한 데이터베이스에 저장되는 객체이기 때문에 
         그 수가 많아지면 관리하기가 어렵습니다.
    -이러한 단점을 극복할 수 있도록 오라클에서는 7 버젼부터 
        질의문의 FROM 절 자체에 서브쿼리를 사용할 수 있는 기능을 제공합니다. 
        그 서브쿼리를 인라인 뷰라고 부르며 질의문의 단순화 및 성능 향상 효과를 얻을 수 있습니다.
    -인라인 뷰는 테이블과 뷰처럼 데이터베이스에 저장되는 객체가 아니고,
        질의문에서 뷰처럼 사용되는 별칭(Alias)을 가진 서브쿼리입니다. 
        서브쿼리 중에서도 FROM 절에 사용된 것을 나타내는 것으로써 
        WHERE 절에 사용되는 것을 나타내는 Nested 서브쿼리의 255 레벨 제한과는 다르게
        Top-Level 질의문에 대하여 그 레벨 제한이 없습니다. 
        뷰와 성격이 유사하며 임시로 만들어진 다음에 없어진다는 특징이 있습니다.
  2.INLINE VIEW 특징
    -SELECT 문의 FROM 절에 Subquery를 사용할 수 있는데 사용 방법은 VIEW와 유사하며, 
        특별히 INLINE VIEW라고 칭합니다.
    -SELECT문의 FROM절에 있는 Subquery 는 특정 SELECT 문에 대한 데이터 소스를 정의하며 
        해당 SELECT 문에 대해서만 정의합니다.
    -INLINE VIEW 는 SQL문장 내에서만 유효한 Temporary VIEW 이므로,
        VIEW 와는 달리 Database Object 가 아닙니다.
    -즉, INLINE VIEW 는 Subquery 형식을 이용한 임시 뷰라고 할 수 있습니다.
    -SQL문 활용이 익숙해지게 되면 INLINE VIEW를 이용한 장문의 SQL문을 작성할 수 있으나 
        일반적으로 인라인 뷰가 메인쿼리보다 먼저 수행되기 때문에 
        Non Procedural 언어인 SQL에 절차적인 기능을 부여한 아주 유용한 기능입니다.
  3.INLINE VIEW의 활용 
      - 조인 회수의 감소
      - 절차성을 위한 인라인 뷰의 활용
 */
